diff --git a/configure.ac b/configure.ac
index 09b34d8..217feef 100644
--- a/configure.ac
+++ b/configure.ac
@@ -429,8 +429,8 @@ AC_PREPROC_IFELSE([AC_LANG_SOURCE([
 #  error not gcc 4
 #endif
 
-#if __GNUC_MINOR__ != 4 && __GNUC_MINOR__ != 5 && __GNUC_MINOR__ != 6
-#  error not gcc 4.4 or 4.5
+#if __GNUC_MINOR__ != 4 && __GNUC_MINOR__ != 5 && __GNUC_MINOR__ != 6 && __GNUC_MINOR__ != 7
+#  error not gcc 4.4 to 4.7
 #endif
 ])],
 	[AC_MSG_RESULT([yes])
diff --git a/doc/configuration/use.html.part.in b/doc/configuration/use.html.part.in
index e0a1a63..d34a785 100644
--- a/doc/configuration/use.html.part.in
+++ b/doc/configuration/use.html.part.in
@@ -77,7 +77,7 @@ default <code>VIDEO_CARDS</code> from your profile, you will need to use <code>*
 
     <dt>symbols</dt>
     <dd>Controls how debug symbols in executables and libraries are handled. If unset or set to <code>preserve</code>,
-    no stripping is done. If set to <code>strip</code>, debug symbols are split. If set to <code>split</code>, debug
+    no stripping is done. If set to <code>strip</code>, debug symbols are stripped. If set to <code>split</code>, debug
     symbols are split out into files in <code>/usr/lib/debug/</code>. If set to <code>compress</code>, symbols are also
     split out, and debug sections are compressed. Note that <code>compress</code> will only work with <code>binutils
         &gt;=2.21.51.0.4</code>, and may cause problems with older versions of <code>gdb</code>.</dd>
diff --git a/paludis/environments/paludis/output_conf.cc b/paludis/environments/paludis/output_conf.cc
index 44d5cea..94213d1 100644
--- a/paludis/environments/paludis/output_conf.cc
+++ b/paludis/environments/paludis/output_conf.cc
@@ -53,6 +53,7 @@
 #include <vector>
 #include <map>
 #include <algorithm>
+#include <unistd.h>
 
 using namespace paludis;
 using namespace paludis::paludis_environment;
diff --git a/paludis/environments/paludis/paludis_environment.cc b/paludis/environments/paludis/paludis_environment.cc
index de4f65d..cbe0708 100644
--- a/paludis/environments/paludis/paludis_environment.cc
+++ b/paludis/environments/paludis/paludis_environment.cc
@@ -65,6 +65,7 @@
 #include <algorithm>
 #include <list>
 #include <map>
+#include <unistd.h>
 
 using namespace paludis;
 using namespace paludis::paludis_environment;
diff --git a/paludis/environments/test/test_environment.cc b/paludis/environments/test/test_environment.cc
index 6e3816f..7d93ffc 100644
--- a/paludis/environments/test/test_environment.cc
+++ b/paludis/environments/test/test_environment.cc
@@ -44,6 +44,7 @@
 #include <unordered_map>
 #include <string>
 #include <list>
+#include <unistd.h>
 
 using namespace paludis;
 
diff --git a/paludis/ndbam.cc b/paludis/ndbam.cc
index c684786..7003ce8 100644
--- a/paludis/ndbam.cc
+++ b/paludis/ndbam.cc
@@ -261,7 +261,7 @@ NDBAM::has_package_named(const QualifiedPackageName & q)
         if (FSPath(_imp->location / "indices" / "categories" /
                     stringify(q.category()) / stringify(q.package())).stat().is_directory_or_symlink_to_directory())
         {
-            cc.package_contents_map.insert(std::make_pair(q, new PackageContents));
+            cc.package_contents_map.insert(std::make_pair(q, std::make_shared<PackageContents>()));
             return true;
         }
         cc.package_contents_map.insert(std::make_pair(q, std::shared_ptr<PackageContents>()));
@@ -596,7 +596,7 @@ NDBAM::category_names_containing_package(const PackageNamePart & p) const
     Lock l(_imp->category_names_containing_package_mutex);
     CategoryNamesContainingPackage::iterator cncp_i(_imp->category_names_containing_package.find(p));
     if (_imp->category_names_containing_package.end() == cncp_i)
-        cncp_i = _imp->category_names_containing_package.insert(std::make_pair(p, new CategoryNamesContainingPackageEntry)).first;
+        cncp_i = _imp->category_names_containing_package.insert(std::make_pair(p, std::make_shared<CategoryNamesContainingPackageEntry>())).first;
     CategoryNamesContainingPackageEntry & cncp(*cncp_i->second);
 
     l.acquire_then_release_old(cncp.mutex);
diff --git a/paludis/repositories/e/do_fetch_action.cc b/paludis/repositories/e/do_fetch_action.cc
index c263184..21dddbb 100644
--- a/paludis/repositories/e/do_fetch_action.cc
+++ b/paludis/repositories/e/do_fetch_action.cc
@@ -46,6 +46,7 @@
 
 #include <algorithm>
 #include <set>
+#include <unistd.h>
 
 using namespace paludis;
 using namespace paludis::erepository;
diff --git a/paludis/repositories/e/do_info_action.cc b/paludis/repositories/e/do_info_action.cc
index addfd70..ea86428 100644
--- a/paludis/repositories/e/do_info_action.cc
+++ b/paludis/repositories/e/do_info_action.cc
@@ -37,6 +37,7 @@
 #include <paludis/output_manager.hh>
 
 #include <algorithm>
+#include <unistd.h>
 
 using namespace paludis;
 using namespace paludis::erepository;
diff --git a/paludis/repositories/e/do_install_action.cc b/paludis/repositories/e/do_install_action.cc
index fd24173..5b05c82 100644
--- a/paludis/repositories/e/do_install_action.cc
+++ b/paludis/repositories/e/do_install_action.cc
@@ -52,6 +52,7 @@
 #include <vector>
 #include <algorithm>
 #include <set>
+#include <unistd.h>
 
 using namespace paludis;
 using namespace paludis::erepository;
diff --git a/paludis/repositories/e/do_pretend_action.cc b/paludis/repositories/e/do_pretend_action.cc
index d0c8abe..b651c8f 100644
--- a/paludis/repositories/e/do_pretend_action.cc
+++ b/paludis/repositories/e/do_pretend_action.cc
@@ -39,6 +39,7 @@
 #include <paludis/action.hh>
 
 #include <algorithm>
+#include <unistd.h>
 
 using namespace paludis;
 using namespace paludis::erepository;
diff --git a/paludis/resolver/collect_depped_upon.cc b/paludis/resolver/collect_depped_upon.cc
index d4d1240..e308989 100644
--- a/paludis/resolver/collect_depped_upon.cc
+++ b/paludis/resolver/collect_depped_upon.cc
@@ -240,7 +240,7 @@ paludis::resolver::dependent_upon(
     }
     else
     {
-        auto k({ &PackageID::build_dependencies_key, &PackageID::run_dependencies_key, &PackageID::post_dependencies_key });
+        auto k { &PackageID::build_dependencies_key, &PackageID::run_dependencies_key, &PackageID::post_dependencies_key };
         for (auto i(k.begin()), i_end(k.end()) ; i != i_end ; ++i)
         {
             auto key(((*id).*(*i))());
diff --git a/paludis/util/config_file_TEST.cc b/paludis/util/config_file_TEST.cc
index be9850f..4c0376b 100644
--- a/paludis/util/config_file_TEST.cc
+++ b/paludis/util/config_file_TEST.cc
@@ -136,14 +136,14 @@ TEST(LineConfigFile, Open)
 
     FSPath ff2("config_file_TEST_dir/not_a_config_file");
     EXPECT_TRUE(! ff2.stat().exists());
-    LineConfigFile * f2(0);
+    LineConfigFile * PALUDIS_ATTRIBUTE((unused)) f2(0);
     EXPECT_THROW(f2 = new LineConfigFile(ff2, { }), ConfigFileError);
 
     if (0 != geteuid())
     {
         FSPath ff3("config_file_TEST_dir/unreadable_file");
         EXPECT_TRUE(ff3.stat().is_regular_file());
-        LineConfigFile * f3(0);
+        LineConfigFile * PALUDIS_ATTRIBUTE((unused)) f3(0);
         EXPECT_THROW(f3 = new LineConfigFile(ff3, { }), ConfigFileError);
     }
 }
diff --git a/paludis/util/cookie.cc b/paludis/util/cookie.cc
index 407db42..f9ae3ab 100644
--- a/paludis/util/cookie.cc
+++ b/paludis/util/cookie.cc
@@ -21,6 +21,7 @@
 #include <paludis/util/stringify.hh>
 #include <sys/types.h>
 #include <sys/time.h>
+#include <unistd.h>
 
 using namespace paludis;
 
diff --git a/paludis/util/fs_path.cc b/paludis/util/fs_path.cc
index ff7b303..29456e4 100644
--- a/paludis/util/fs_path.cc
+++ b/paludis/util/fs_path.cc
@@ -40,6 +40,7 @@
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <fcntl.h>
+#include <unistd.h>
 
 #include "config.h"
 
diff --git a/paludis/util/graph.hh b/paludis/util/graph.hh
index ee1be87..a51d32e 100644
--- a/paludis/util/graph.hh
+++ b/paludis/util/graph.hh
@@ -23,6 +23,7 @@
 #include <paludis/util/graph-fwd.hh>
 #include <paludis/util/pimp.hh>
 #include <paludis/util/exception.hh>
+#include <paludis/util/stringify.hh>
 #include <memory>
 
 /** \file
diff --git a/paludis/util/named_value.hh b/paludis/util/named_value.hh
index bf61198..6375de0 100644
--- a/paludis/util/named_value.hh
+++ b/paludis/util/named_value.hh
@@ -90,6 +90,12 @@ namespace paludis
             {
             }
 
+            NamedValue & operator=(const NamedValue & v)
+            {
+                _value = v._value;
+                return *this;
+            }
+
             V_ & operator() ()
             {
                 return _value;
diff --git a/paludis/util/pty.cc b/paludis/util/pty.cc
index 294f54b..d2cbd41 100644
--- a/paludis/util/pty.cc
+++ b/paludis/util/pty.cc
@@ -25,6 +25,7 @@
 #include <fcntl.h>
 #include <errno.h>
 #include <cstring>
+#include <unistd.h>
 #include "config.h"
 
 #ifdef HAVE_PTSNAME_R
diff --git a/python/exception.cc b/python/exception.cc
index 0da8e51..bf4fd19 100644
--- a/python/exception.cc
+++ b/python/exception.cc
@@ -73,8 +73,8 @@ ExceptionRegister::get_py_exception(const std::string & name)
     }
 }
 
-PythonError::PythonError(const std::string & message) throw () :
-    Exception(message)
+PythonError::PythonError(const std::string & m) throw () :
+    Exception(m)
 {
 }
 
diff --git a/python/iterable.hh b/python/iterable.hh
index 2663559..8dc3589 100644
--- a/python/iterable.hh
+++ b/python/iterable.hh
@@ -53,7 +53,7 @@ namespace paludis
         template <typename To_, typename From_, typename C_, bool>
         struct ConditionalAdd
         {
-            static void add(C_ &, PyObject * ptr)
+            static void add(C_ &, PyObject *)
             {
             }
         };
diff --git a/python/mask.cc b/python/mask.cc
index 71e12d9..c6ef7b6 100644
--- a/python/mask.cc
+++ b/python/mask.cc
@@ -41,22 +41,22 @@ class MaskSptrToPythonVisitor
         {
         }
 
-        void visit(const UserMask & m)
+        void visit(const UserMask &)
         {
             obj = bp::object(std::static_pointer_cast<const UserMask>(_m_ptr));
         }
 
-        void visit(const UnacceptedMask & m)
+        void visit(const UnacceptedMask &)
         {
             obj = bp::object(std::static_pointer_cast<const UnacceptedMask>(_m_ptr));
         }
 
-        void visit(const RepositoryMask & m)
+        void visit(const RepositoryMask &)
         {
             obj = bp::object(std::static_pointer_cast<const RepositoryMask>(_m_ptr));
         }
 
-        void visit(const UnsupportedMask & m)
+        void visit(const UnsupportedMask &)
         {
             obj = bp::object(std::static_pointer_cast<const UnsupportedMask>(_m_ptr));
         }
diff --git a/python/metadata_key.cc b/python/metadata_key.cc
index 0aa641d..fac21c8 100644
--- a/python/metadata_key.cc
+++ b/python/metadata_key.cc
@@ -47,112 +47,112 @@ class MetadataKeySptrToPythonVisitor
         {
         }
 
-        void visit(const MetadataValueKey<std::shared_ptr<const PackageID> > & k)
+        void visit(const MetadataValueKey<std::shared_ptr<const PackageID> > &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataValueKey<std::shared_ptr<const PackageID> > >(_m_ptr));
         }
 
-        void visit(const MetadataValueKey<std::string> & k)
+        void visit(const MetadataValueKey<std::string> &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataValueKey<std::string> >(_m_ptr));
         }
 
-        void visit(const MetadataValueKey<SlotName> & k)
+        void visit(const MetadataValueKey<SlotName> &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataValueKey<SlotName> >(_m_ptr));
         }
 
-        void visit(const MetadataValueKey<long> & k)
+        void visit(const MetadataValueKey<long> &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataValueKey<long> >(_m_ptr));
         }
 
-        void visit(const MetadataValueKey<bool> & k)
+        void visit(const MetadataValueKey<bool> &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataValueKey<bool> >(_m_ptr));
         }
 
-        void visit(const MetadataTimeKey & k)
+        void visit(const MetadataTimeKey &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataTimeKey>(_m_ptr));
         }
 
-        void visit(const MetadataValueKey<std::shared_ptr<const Choices> > & k)
+        void visit(const MetadataValueKey<std::shared_ptr<const Choices> > &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataValueKey<std::shared_ptr<const Choices> > >(_m_ptr));
         }
 
-        void visit(const MetadataValueKey<FSPath> & k)
+        void visit(const MetadataValueKey<FSPath> &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataValueKey<FSPath> >(_m_ptr));
         }
 
-        void visit(const MetadataCollectionKey<KeywordNameSet> & k)
+        void visit(const MetadataCollectionKey<KeywordNameSet> &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataCollectionKey<KeywordNameSet> >(_m_ptr));
         }
 
-        void visit(const MetadataCollectionKey<Set<std::string> > & k)
+        void visit(const MetadataCollectionKey<Set<std::string> > &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataCollectionKey<Set<std::string> > >(_m_ptr));
         }
 
-        void visit(const MetadataCollectionKey<Map<std::string, std::string> > & k)
+        void visit(const MetadataCollectionKey<Map<std::string, std::string> > &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataCollectionKey<Map<std::string, std::string> > >(_m_ptr));
         }
 
-        void visit(const MetadataCollectionKey<Sequence<std::string> > & k)
+        void visit(const MetadataCollectionKey<Sequence<std::string> > &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataCollectionKey<Sequence<std::string> > >(_m_ptr));
         }
 
-        void visit(const MetadataCollectionKey<FSPathSequence> & k)
+        void visit(const MetadataCollectionKey<FSPathSequence> &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataCollectionKey<FSPathSequence> >(_m_ptr));
         }
 
-        void visit(const MetadataCollectionKey<Maintainers> & k)
+        void visit(const MetadataCollectionKey<Maintainers> &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataCollectionKey<Maintainers> >(_m_ptr));
         }
 
-        void visit(const MetadataSpecTreeKey<LicenseSpecTree> & k)
+        void visit(const MetadataSpecTreeKey<LicenseSpecTree> &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataSpecTreeKey<LicenseSpecTree> >(_m_ptr));
         }
 
-        void visit(const MetadataSpecTreeKey<DependencySpecTree> & k)
+        void visit(const MetadataSpecTreeKey<DependencySpecTree> &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataSpecTreeKey<DependencySpecTree> >(_m_ptr));
         }
 
-        void visit(const MetadataSpecTreeKey<PlainTextSpecTree> & k)
+        void visit(const MetadataSpecTreeKey<PlainTextSpecTree> &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataSpecTreeKey<PlainTextSpecTree> >(_m_ptr));
         }
 
-        void visit(const MetadataSpecTreeKey<RequiredUseSpecTree> & k)
+        void visit(const MetadataSpecTreeKey<RequiredUseSpecTree> &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataSpecTreeKey<RequiredUseSpecTree> >(_m_ptr));
         }
 
-        void visit(const MetadataSpecTreeKey<FetchableURISpecTree> & k)
+        void visit(const MetadataSpecTreeKey<FetchableURISpecTree> &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataSpecTreeKey<FetchableURISpecTree> >(_m_ptr));
         }
 
-        void visit(const MetadataSpecTreeKey<SimpleURISpecTree> & k)
+        void visit(const MetadataSpecTreeKey<SimpleURISpecTree> &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataSpecTreeKey<SimpleURISpecTree> >(_m_ptr));
         }
 
-        void visit(const MetadataCollectionKey<PackageIDSequence> & k)
+        void visit(const MetadataCollectionKey<PackageIDSequence> &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataCollectionKey<PackageIDSequence> >(_m_ptr));
         }
 
-        void visit(const MetadataSectionKey & k)
+        void visit(const MetadataSectionKey &)
         {
             obj = bp::object(std::static_pointer_cast<const MetadataSectionKey>(_m_ptr));
         }
diff --git a/python/slot_requirement.cc b/python/slot_requirement.cc
index 6cde772..e08a74b 100644
--- a/python/slot_requirement.cc
+++ b/python/slot_requirement.cc
@@ -46,17 +46,17 @@ namespace
             {
             }
 
-            void visit(const SlotExactRequirement & k)
+            void visit(const SlotExactRequirement &)
             {
                 obj = bp::object(std::static_pointer_cast<const SlotExactRequirement>(_m_ptr));
             }
 
-            void visit(const SlotAnyLockedRequirement & k)
+            void visit(const SlotAnyLockedRequirement &)
             {
                 obj = bp::object(std::static_pointer_cast<const SlotAnyLockedRequirement>(_m_ptr));
             }
 
-            void visit(const SlotAnyUnlockedRequirement & k)
+            void visit(const SlotAnyUnlockedRequirement &)
             {
                 obj = bp::object(std::static_pointer_cast<const SlotAnyUnlockedRequirement>(_m_ptr));
             }
diff --git a/ruby/Makefile.am b/ruby/Makefile.am
index 5e8e79d..34f947a 100644
--- a/ruby/Makefile.am
+++ b/ruby/Makefile.am
@@ -76,12 +76,12 @@ if ENABLE_RUBY
 
 lib_LTLIBRARIES = libpaludisruby_@PALUDIS_PC_SLOT@.la
 
-libpaludisruby_@PALUDIS_PC_SLOT@_la_CXXFLAGS = $(AM_CXXFLAGS) -I. $(RUBY_CFLAGS)
+libpaludisruby_@PALUDIS_PC_SLOT@_la_CXXFLAGS =  $(RUBY_CFLAGS) $(AM_CXXFLAGS) -I.
 libpaludisruby_@PALUDIS_PC_SLOT@_la_LDFLAGS = -version-info @VERSION_LIB_CURRENT@:@VERSION_LIB_REVISION@:0
 
 paludis_ruby_so.o : paludis_ruby_so.cc
 	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) \
-	    $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) $(RUBY_CFLAGS) -c \
+	    $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(RUBY_CFLAGS) $(AM_CXXFLAGS) -c \
 	    -o $@ $(srcdir)/paludis_ruby_so.cc ; then ln -fs .libs/paludis_ruby_so.o $@ ; else rm -f $@ ; exit 1 ; fi
 
 libpaludisruby_@PALUDIS_PC_SLOT@_la_SOURCES = $(IF_RUBY_SOURCES)
diff --git a/src/clients/cave/cmd_display_resolution.cc b/src/clients/cave/cmd_display_resolution.cc
index 5d6a25d..9046b0f 100755
--- a/src/clients/cave/cmd_display_resolution.cc
+++ b/src/clients/cave/cmd_display_resolution.cc
@@ -92,6 +92,7 @@
 #include <cstdlib>
 #include <map>
 #include <limits>
+#include <unistd.h>
 
 using namespace paludis;
 using namespace cave;
diff --git a/src/clients/cave/cmd_generate_metadata.cc b/src/clients/cave/cmd_generate_metadata.cc
index f5fdae4..0925071 100644
--- a/src/clients/cave/cmd_generate_metadata.cc
+++ b/src/clients/cave/cmd_generate_metadata.cc
@@ -48,6 +48,7 @@
 #include <iostream>
 #include <algorithm>
 #include <map>
+#include <unistd.h>
 
 #include "command_command_line.hh"
 
diff --git a/src/clients/cave/cmd_manage_search_index.cc b/src/clients/cave/cmd_manage_search_index.cc
index 34e2229..48e0f23 100644
--- a/src/clients/cave/cmd_manage_search_index.cc
+++ b/src/clients/cave/cmd_manage_search_index.cc
@@ -55,6 +55,7 @@
 #include <algorithm>
 #include <list>
 #include <map>
+#include <unistd.h>
 
 #include "config.h"
 #include "command_command_line.hh"
diff --git a/src/clients/cave/cmd_search.cc b/src/clients/cave/cmd_search.cc
index c4e5cf1..6afbb40 100644
--- a/src/clients/cave/cmd_search.cc
+++ b/src/clients/cave/cmd_search.cc
@@ -55,6 +55,7 @@
 #include <algorithm>
 #include <set>
 #include <map>
+#include <unistd.h>
 
 #include "command_command_line.hh"
 
diff --git a/src/clients/cave/format_user_config.hh b/src/clients/cave/format_user_config.hh
index ec95476..f14778a 100644
--- a/src/clients/cave/format_user_config.hh
+++ b/src/clients/cave/format_user_config.hh
@@ -68,7 +68,7 @@ namespace paludis
         struct MinElement<c_, cs_...>
         {
             enum {
-                cs_value = MinElement<cs_...>::value,
+                cs_value = static_cast<char>(MinElement<cs_...>::value),
                 c_value = c_,
                 value = (cs_value < c_value ? cs_value : c_value)
             };
