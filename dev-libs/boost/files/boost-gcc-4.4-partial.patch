diff -Nurp boost/fusion/sequence/intrinsic/at.hpp /usr/include/boost/fusion/sequence/intrinsic/at.hpp
--- boost/fusion/sequence/intrinsic/at.hpp	2007-11-25 19:07:19.000000000 +0100
+++ /usr/include/boost/fusion/sequence/intrinsic/at.hpp	2009-04-18 22:05:29.000000000 +0200
@@ -98,7 +98,7 @@ namespace boost { namespace fusion
     inline typename result_of::at_c<Sequence const, N>::type
     at_c(Sequence const& seq)
     {
-        return at<mpl::int_<N> >(seq);
+        return fusion::at<mpl::int_<N> >(seq);
     }
 }}
 
diff -Nurp boost/gil/color_base_algorithm.hpp /usr/include/boost/gil/color_base_algorithm.hpp
--- boost/gil/color_base_algorithm.hpp	2007-11-25 19:07:19.000000000 +0100
+++ /usr/include/boost/gil/color_base_algorithm.hpp	2009-04-18 22:03:48.000000000 +0200
@@ -101,7 +101,7 @@ template <typename ColorBase, int K> str
 template <typename ColorBase, int K> struct kth_semantic_element_reference_type {
     BOOST_STATIC_CONSTANT(int, semantic_index = (mpl::at_c<typename ColorBase::layout_t::channel_mapping_t,K>::type::value));
     typedef typename kth_element_reference_type<ColorBase,semantic_index>::type type;
-    static type       get(ColorBase& cb) { return at_c<semantic_index>(cb); }
+    static type       get(ColorBase& cb) { return gil::at_c<semantic_index>(cb); }
 };
 
 /// \brief Specifies the return type of the constant semantic_at_c<K>(color_base);
@@ -109,7 +109,7 @@ template <typename ColorBase, int K> str
 template <typename ColorBase, int K> struct kth_semantic_element_const_reference_type {
     BOOST_STATIC_CONSTANT(int, semantic_index = (mpl::at_c<typename ColorBase::layout_t::channel_mapping_t,K>::type::value));
     typedef typename kth_element_const_reference_type<ColorBase,semantic_index>::type type;
-    static type       get(const ColorBase& cb) { return at_c<semantic_index>(cb); }
+    static type       get(const ColorBase& cb) { return gil::at_c<semantic_index>(cb); }
 };
 
 /// \brief A mutable accessor to the K-th semantic element of a color base
diff -Nurp boost/gil/image_view_factory.hpp /usr/include/boost/gil/image_view_factory.hpp
--- boost/gil/image_view_factory.hpp	2007-11-25 19:07:19.000000000 +0100
+++ /usr/include/boost/gil/image_view_factory.hpp	2009-04-18 22:07:50.000000000 +0200
@@ -102,7 +102,7 @@ typename detail::channel_pointer_type<Ho
     BOOST_STATIC_ASSERT((!is_planar<HomogeneousView>::value && view_is_basic<HomogeneousView>::value));
     BOOST_STATIC_ASSERT((boost::is_pointer<typename HomogeneousView::x_iterator>::value));
 
-    return &at_c<0>(view(0,0));
+    return &gil::at_c<0>(view(0,0));
 }

